#!/bin/bash
#
# Usage: branch [branchname]
#
#
# Switch to an existing branch or creates a new local-only branch
# Adds remote tracking if a remote branch with the same name exists
# Executing without arguments prints all local & remote branches
#

remote="origin"
branch=$1

if [ -z $branch ]; then
  echo "\nSwitch to or create a new branch:"
  echo " $(basename $0) [name]"
  echo "\nCurrent branches: "
  branches="git branch -a -vv"
  $branches
  echo
  exit 0
fi


local_branch_exists=$(git branch | egrep "$branch\$")
remote_branch_exists=$(git branch -r | egrep "$remote/$branch\$")

# If local exists already, switch to it
if [ -n "$local_branch_exists" ] && [ ! "$local_branch_exists" == '' ]; then
  echo "Switching to existing local branch..."
  git checkout $branch

  # Track remote branch if not already, or create remote if needed
  if [ -n "$remote_branch_exists" ] && [ ! "$remote_branch_exists" == '' ]; then
    tracking=$(git branch -vv | grep "*" | awk '{ print $4 '})
    # echo "Remote branch exists. Local branch is tracking: $tracking"
    if [[ ! "$tracking" =~ "$remote" ]]; then
      echo "Whoa, your local branch is not tracking a corresponding remote branch! Adding..."
      git branch --set-upstream $branch $remote/$branch
    fi
  # else
  #   echo "Remote branch does not exist, not doing anything"
  fi

# If remote exists, create a local branch that tracks the remote
elif [ -n "$remote_branch_exists" ] && [ ! "$remote_branch_exists" == '' ]; then
  echo "* Tracking existing remote branch..."
  git checkout -b $branch --track $remote/$branch

# Otherwise create a new local branch
else
  echo "* Creating new local branch..."
  git checkout -b $branch --no-track
fi

exit 0
